################################################################################
# global stuff
################################################################################


global !p
def insert_top(name):
    vim.command('normal gg')
    vim.command('2/"""')
    vim.command('normal j')
    snip.expand_anon(name)
    snip.cursor.set(snip.line+1,snip.column+1)
endglobal


################################################################################
# Snippets
################################################################################


snippet skeleton "python skeleton" b
#!/usr/bin/env python3
"""
Implementation of ${1:X}
Input:
Output:
"""
class $1:
    def __init__(self):
        pass

class Test_$1:
    pass

def main():
    """
    run code
    """
    pass


if __name__ == "__main__":
    main()
endsnippet


snippet def "define fuction with docstring" b
def ${1:function name}(${2:args}):
    """
    ($2)
    ${3:Description}
    """
    ${4:pass}
    
endsnippet


snippet ifmain "ifmain" b
if __name__ == "__main__":
    ${1:${VISUAL:main}}()
endsnippet

post_jump "if snip.tabstop == 0: insert_top('from sklearn.model_selection import train_test_split\n')"
snippet tts "train_test_split" b
X_train, X_${1:${VISUAL:test}}, y_train, y_$1 = train_test_split(
    ${2:${VISUAL:X}},
    y,
    test_size=0.2,
    random_state=42
)

endsnippet


################################################################################
### imports
################################################################################


snippet "i ct" "import ColumnTransformer" b
from sklearn.compose import ColumnTransformer
endsnippet

snippet "i pd" "import pandas" b
import pandas as pd
endsnippet

snippet "i np" "import numpy" b
import numpy as np
endsnippet

snippet "i mms" "import MinMaxScaler" b
from sklearn.preprocessing import MinMaxScaler
endsnippet

snippet "i ohe" "import OneHotEncoder" b
from sklearn.preprocessing import OneHotEncoder
endsnippet

snippet "i osa" "import over sampling ADASYN" b
from imblearn.over_sampling import ADASYN 
endsnippet

snippet "i clfr" "import classification report" b
from sklearn.metrics import classification_report
endsnippet


# AdaBoost
post_jump "if snip.tabstop == 0: insert_top('from sklearn.ensemble import AdaBoostClassifier\n')"
snippet abc "import Ada Boosting Classifier" b
clf = AdaBoostClassifier(verbose=1, random_state=42).fit(X_${1:train}, y_$1)
${3:y_$2_pred} = clf.predict(X_${2:test})

print(classification_report(y_${4:test}, $3))

endsnippet

# GradientBoostingClassifier 
post_jump "if snip.tabstop == 0: insert_top('from sklearn.ensemble import GradientBoostingClassifier\n')"
snippet gbc "import Gradient Boosting Classifier" b
clf = GradientBoostingClassifier(verbose=1, random_state=42).fit(X_${1:train}, y_$1)
${3:y_$2_pred} = clf.predict(X_${2:test})

print(classification_report(y_${4:test}, $3))

endsnippet


# XGB Classifier
post_jump "if snip.tabstop == 0: insert_top('import xgboost as xgb\n')"
snippet xgbc "XGB Classifier" b
clf = xgb.XGBClassifier(random_state = 42, n_jobs = -1).fit(X_${1:train}, y_$1)
${3:y_$2_pred} = clf.predict(X_${2:test})

print(classification_report(y_${4:test}, $3))

endsnippet
